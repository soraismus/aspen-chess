{ colorAt, rankOf } = require './extractors'
{ defaults }        = require './base-helpers'
genPos              = require('./constructors').generatePosition
stepperFns          = require './stepper'

{
  black
  king
  noCastlingRts
  white
} = require './constants'

{
  castlingMatcher
  emptyAt?
  fileDifference
} = require './utilities'

KQ = 'KQ'
kq = 'kq'
K  = 'K'
Q  = 'Q'
k  = 'k'
q  = 'q'
NO = '-'

noRts = noCastlingRts

kingCastlingTgtFiles = [2, 6]

kingCastlingTgts = [
  c1 = genPos (7, 2)
  g1 = genPos (7, 6)
  c8 = genPos (0, 2)
  g8 = genPos (0, 6)
]

b1 = genPos (7, 1)
b8 = genPos (0, 1)

[c1Key, g1Key, c8Key, g8Key] = kingCastlingTgts.map JSON.stringify

possibleRookPaths = [[5, 7], [3, 0], [61, 63], [59, 56]]

rookCastlingSrcs = {}
rookCastlingSrcs[c8Key] = genPos (0, 0)
rookCastlingSrcs[g8Key] = genPos (0, 7)
rookCastlingSrcs[c1Key] = genPos (7, 0)
rookCastlingSrcs[g1Key] = genPos (7, 7)

rookCastlingTgts = {}
rookCastlingTgts[c8Key] = genPos (0, 3)
rookCastlingTgts[g8Key] = genPos (0, 5)
rookCastlingTgts[c1Key] = genPos (7, 3)
rookCastlingTgts[g1Key] = genPos (7, 5)

t0  = []
t1  = [c1]
t2  = [g1]
t12 = [c1, g1]
t3  = [c8]
t4  = [g8]
t34 = [c8, g8]

newCastlingRts = {}

newCastlingRts[white] =
  KQkq : kq, KQk : k, KQq : q, KQ : NO, Kkq : kq, Kk : k, Kq : q, K   : NO
  Qkq  : kq, Qk  : k, Qq  : q, Q  : NO, kq  : kq, k  : k, q  : q, '-' : NO

newCastlingRts[black] =
  KQkq : KQ, Qkq : Q, Kkq : K, kq : NO, KQq : KQ, Qq : Q, Kq : K, q   : NO
  KQk  : KQ, Qk  : Q, Kk  : K, k  : NO, KQ  : KQ, Q  : Q, K  : K, '-' : NO 

castlingTgts = {}

castlingTgts[white] =
  KQkq : t12, KQk : t12, KQq : t12, KQ  : t12
  Qkq  : t1,  Qk  : t1,  Qq  : t1,  Q   : t1
  Kkq  : t2,  Kk  : t2,  Kq  : t2,  K   : t2
  kq   : t0,  k   : t0,  q   : t0,  '-' : t0

castlingTgts[black] =
  KQkq : t34, Qkq : t34, Kkq : t34, kq  : t34
  KQq  : t3,  Qq : t3,   Kq  : t3,  q   : t3
  KQk  : t4,  Qk : t4,   Kk  : t4,  k   : t4
  KQ   : t0,  Q  : t0,   K   : t0,  '-' : t0 

castlingPaths = {}
castlingPaths[c1Key] = [(e1 = genPos (7, 4)), genPos (7, 3), c1]
castlingPaths[g1Key] = [e1, genPos (7, 5), g1] 
castlingPaths[c8Key] = [(e8 = genPos (0, 4)), genPos (0, 3), c8]
castlingPaths[g8Key] = [e8, genPos (0, 5), g8]

castling? = (src, tgt) ->
  Math.abs (fileDifference (src, tgt)) > 1

castlingPermitted? = (castlingRts, black?) -> \rankDiff ->
  kingward? = rankDiff > 0
  matcher = castlingMatcher (black?, kingward?)
  /#{matcher}/.test castlingRts

getPotentialCastlingMoves = (bd, color, castlingRts, attackable?) ->

  castlingTgts[color][castlingRts]
      .filter (queensideTransitable? bd)
      .filter (safe? (bd, color, attackable?))

getPotentialKingAttacks = (bd, src) ->
  kingFns.getPotentialMoves (bd, src, noRts)

modifyCastlingRights = (rts, src) ->
  kingColor = if rankOf src == 0 then black else white
  newCastlingRts[kingColor][rts]

queensideTransitable? = \board \tgt ->
  switch tgt
    when c1 then (emptyAt? board b1)
    when c8 then (emptyAt? board b8)
    else true

rookCastlingPath = \kingTgt ->
  key = JSON.stringify kingTgt
  src = rookCastlingSrcs[key]
  tgt = rookCastlingTgts[key]
  [src, tgt]

safe? = (board, color, attackable?) -> (tgt) ->
  key = JSON.stringify tgt

  do (attackable? = attackable?.bind (null, board, color)) ->

    ! (castlingPaths[key].some attackable?)

# ----------------
# Mixin : Stepper
# ----------------

kingFns = defaults stepperFns {
  getPotentialKingAttacks
  modifyCastlingRights
}

# --------------------------
# Override mixin functions.
# --------------------------

castle = do (simpleMove = kingFns.move) ->
  (bd, src, tgt) ->
    [rookSrc, rookTgt] = rookCastlingPath tgt
    bdAfterKingMoves  = simpleMove (bd, src) tgt
    simpleMove (bdAfterKingMoves, rookSrc) rookTgt

kingFns.getPotentialMoves = do (getSimpleMoves = kingFns.getPotentialMoves) ->
  (bd, src, rts, _0, _1, attackable?) ->
    kingColor  = colorAt bd src

    simpleMoves = getSimpleMoves (
      bd, src, undefined, undefined, king)

    return simpleMoves if rts == noRts

    simpleMoves.concat (
      getPotentialCastlingMoves (bd, kingColor, rts, attackable?))
  
kingFns.move = do (nonCastlingMove = kingFns.move) ->
  (bd, src) -> \tgt ->
    if castling? (src, tgt)
      castle (bd, src, tgt)
    else
      nonCastlingMove (bd, src) tgt

module.exports = kingFns
