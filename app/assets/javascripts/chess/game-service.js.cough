{ defaults }      = require './base-helpers'
{ encodeContext } = require './fen-service'
kingFns           = require './king'
knightFns         = require './knight'
pawnFns           = require './pawn'
rookFns           = require './rook'
sliderFns         = require './slider'

{
  black?
  opposingColor
  replace
  samePosition?
  to_2d
} = require './utilities'

{
  chessmanPositionsFrom
  chessmanTypeAt
  chessmanTypeOf
  colorOf
  squareAt
} = require './extractors'

{
  bishop
  blackKing
  king
  knight
  noCastlingRts
  pawn
  queen
  rook
  whiteKing
  unsetPromotionPos
} = require './constants'

dispatchTable = {}
dispatchTable[king  ] = kingFns
dispatchTable[queen ] = sliderFns
dispatchTable[rook  ] = rookFns
dispatchTable[bishop] = sliderFns
dispatchTable[knight] = knightFns
dispatchTable[pawn  ] = pawnFns

addMsg = (ctx, msg) ->
  (newCtx = copy ctx).message = msg
  newCtx

attackable? = (board, color, pos) ->
  vulnPositions = vulnerablePositionsFor (board, color)
  contains (vulnPositions, pos)

call = \fnName \chessmanType ->
  dispatchTable[chessmanType][fnName]

checkmate? = (bd, passant, color) ->
  allyPositions = chessmanPositionsFrom (bd, color)

  for allyPos in allyPositions
    potentialMoves =
      getPotentialMoves (bd, allyPos, noCastlingRts, passant)

    for potentialMv in potentialMoves
      newBd = move (bd, allyPos, passant) potentialMv
      return false unless inCheck? (newBd, color)

  true

contains = (potentialPositions, tgt) ->
  potentialPositions.some (samePosition? tgt)

copy = \ctx ->
  defaults ctx {}

extractProps = \ctx ->
  {
    board
    player
    castlingRights
    passantPosition
    clock
    moveNumber
  } = ctx

  [board, player, castlingRights, passantPosition, clock, moveNumber]

gameCompletedResponse = \newCtx ->
  addMsg (newCtx, 'checkmate')

gameContinuesResponse = \newCtx ->
  addMsg (newCtx, 'check')

generateNewCtx = (newBd, origCtx, src, tgt) ->
  [origBd, player, rts, pass, clock, mvNbr] = extractProps origCtx

  board  : newBd
  player : opposingColor player
  castlingRights    : modifyCastlingRights (origBd, src, rts)
  passantPosition   : setPassantPosition   (origBd, src, tgt)
  promotionPosition : setPromotionPosition (origBd, src, tgt)
  clock             : updateClock (clock)
  moveNumber        : updateMoveNumber (player, mvNbr)

getPotentialKingAttacks = (bd, src) ->
  type = chessmanTypeAt bd src
  call 'getPotentialKingAttacks' type (bd, src, type)

getPotentialMoves = (bd, src, rts, passant) ->
  type = chessmanTypeAt bd src
  call 'getPotentialMoves' type (bd, src, rts, passant, type, attackable?)

inCheck? = (board, color) ->
  kingPos = kingPositionFor (board, color)
  attackable? (board, color, kingPos)

kingPositionFor = (board, color) ->
  king = if black? color then blackKing else whiteKing
  to_2d (board.indexOf king)

kingSafeResponse = \newCtx ->
  [newBd, opponent] = extractProps newCtx
  
  if inCheck? (newBd, opponent)
    possibleCheckmateResponse (newCtx)
  else
    newCtx

kingUnsafeResponse = \ctx ->
  addMsg (ctx, 'illegal move')

modifyCastlingRights = (bd, src, rts) ->
  type = chessmanTypeAt bd src
  call 'modifyCastlingRights' type (rts, src)

move = (bd, src, passant) -> \tgt ->
  type = chessmanTypeAt bd src
  call 'move' type (bd, src, passant) tgt

moveIllegalResponse = \ctx ->
  addMsg (ctx, 'illegal move')

moveLegal? = (bd, src, rts, passant) -> \tgt ->
  type = chessmanTypeAt bd src
  potentialTgts = getPotentialMoves (bd, src, rts, passant)
  
  contains (potentialTgts, tgt)

moveLegalResponse = (origCtx, src, tgt) ->
  [bd, player, _, passant] = extractProps origCtx

  newBd = move (bd, src, passant) tgt

  if inCheck? (newBd, player)
    kingUnsafeResponse (origCtx)
  else
    newCtx = generateNewCtx (newBd, origCtx, src, tgt)
    kingSafeResponse (newCtx)

possibleCheckmateResponse = \newCtx ->
  [newBd, opponent, _, newPassant] = extractProps newCtx

  if checkmate? (newBd, newPassant, opponent)
    gameCompletedResponse (newCtx)
  else
    gameContinuesResponse (newCtx)

promote = \ctx \chessman ->
  newBoard = replace (chessman, ctx.board, ctx.promotionPosition)
  newCtx = copy ctx
  newCtx.board = newBoard
  newCtx.promotionPosition = unsetPromotionPos
  kingSafeResponse newCtx

queryGameService = (ctx, src, tgt) ->
  [bd, player, rts, passant] = extractProps ctx

  if moveLegal? (bd, src, rts, passant) tgt
    moveLegalResponse (ctx, src, tgt)
  else
    moveIllegalResponse ctx

setPassantPosition = (bd, src, tgt) ->
  chessman = squareAt bd src
  type     = chessmanTypeOf chessman
  color    = colorOf chessman

  call 'setPassantPosition' type (color, src, tgt)

setPromotionPosition = (bd, src, tgt) ->
  chessman = squareAt bd src
  type     = chessmanTypeOf chessman
  color    = colorOf chessman

  call 'setPromotionPosition' type (color, tgt)

updateClock = \nbr ->
  nbr + 1

updateMoveNumber = (player, mvNbr) ->
  if black? player then mvNbr + 1 else mvNbr

vulnerablePositionsFor = (board, color) ->
  foeColor     = opposingColor (color)
  foePositions = chessmanPositionsFrom (board, foeColor)

  getPotentialKingAttacks = \pos ->
    getPotentialKingAttacks (board, pos)

  #Array.concat.apply (null, (foePositions.map getPotentialKingAttacks))
  shallowFlatten (foePositions.map getPotentialKingAttacks)

gameService = {
  promote
  queryGameService
}

module.exports = gameService
