chessmanFns                             = require './chessman'
{ colorAt, rank_&_file_from }           = require './extractors'
{ defaults }                            = require './baseHelpers'
{ generatePosition, generatePosition! } = require './constructors'

{
  black
  emptySquare
  unsetPassantPos
  unsetPromotionPos
  white
} = require './constants'

{
  colorAbsent?
  inessent?
  opponent?
  passantPositionUnset?
  rankDifference
  replace
  samePosition?
} = require './utilities'

homeRanks = {}
homeRanks[black] = 1
homeRanks[white] = 6

directions = {}
directions[black] = 1
directions[white] = -1

promotionRanks = {}
promotionRanks[black] = 7
promotionRanks[white] = 0

advancing_2_squares? = (src, tgt) ->
  Math.abs (rankDifference (src, tgt)) > 1

atHomeRank? = (color, rank) ->
  homeRanks[color] == rank

atPromotionRank? = (color, rank) ->
  promotionRanks[color] == rank

behind = (dir, position) ->
  dir = -1 * dir
  [rank, file] = rank_&_file_from position

  [rank + dir, file]

deletePassantIfEnpassantCapture = (bd, color, setPassant, tgt) ->
  if samePosition? tgt setPassant
    deletePassedPawn (bd, color, setPassant)
  else
    bd

deletePassedPawn = (board, color, passant) ->
  direction = directionFor color
  replace (emptySquare, board, behind (direction, passant))

directionFor = \color ->
  directions[color]

getDiagonalPositions = (rank, file, dir) ->
  genPos = generatePosition!.bind (null, rank + dir)
  ([file - 1, file + 1].map genPos).filter inessent?

getDiagAttacks = (board, rank, file, color, dir, passant) ->
  foePresent? = \pos -> opponent? [color, colorAt pos]
  passant?    = samePosition? passant
  available?  = \val -> foePresent? val || passant? val
  colorAt     = colorAt board
  diagAttacks = getDiagonalPositions (rank, file, dir)
  
  diagAttacks.filter available?

getFwdMoves = (board, rank, file, color, dir) ->
  fwdMoves  = []
  tgt1      = generatePosition (rank + dir, file)
  tgt1Color = colorAt board tgt1

  return fwdMoves unless colorAbsent? tgt1Color

  fwdMoves.push tgt1

  return fwdMoves unless atHomeRank? (color, rank)

  # Because, for the vast majority of the game, pawns may
  # only advance one square, 'generatePosition',
  # 'colorAt board', and 'colorAbsent?' are not memoized
  # with local variables.

  tgt2      = generatePosition (rank + 2 * dir, file)
  tgt2Color = colorAt board tgt2

  return fwdMoves unless colorAbsent? tgt2Color

  fwdMoves.push tgt2

  return fwdMoves

getPotentialKingAttacks = (bd, src) ->
  color = colorAt bd src

  [rank, file]  = rank_&_file_from src
  pawnDirection = directionFor color

  getDiagonalPositions (rank, file, pawnDirection)

getPotentialMoves = (bd, src, rts, passant) ->
  color = colorAt bd src
  [rank, file] = rank_&_file_from src
  dir = directionFor color

  moves = Array.prototype.concat.call (
    getFwdMoves    (bd, rank, file, color, dir)
    getDiagAttacks (bd, rank, file, color, dir, passant)
  )

  moves.filter inessent?

setPassantPosition = (pawnColor, src, tgt) ->
  if advancing_2_squares? (src, tgt)
    dir = directionFor pawnColor
    behind (dir, tgt)
  else
    unsetPassantPos

setPromotionPosition = (pawnColor, tgt) ->
  [tgtRank, _] = rank_&_file_from tgt

  if atPromotionRank? (pawnColor, tgtRank)
    tgt
  else
    unsetPromotionPos

# ----------------
# Mixin : Chessman
# ----------------

pawnFns = defaults chessmanFns {
  getPotentialKingAttacks
  getPotentialMoves
  setPassantPosition
  setPromotionPosition
}

# --------------------------
# Override mixin functions.
# --------------------------

pawnFns.move = do (simpleMove = pawnFns.move) ->
  (bd, src, passant) -> \tgt ->
    bdAfterBasicMove = simpleMove (bd, src) tgt

    return bdAfterBasicMove if passantPositionUnset? passant

    deletePassantIfEnpassantCapture (
      bdAfterBasicMove, (colorAt bd src), passant, tgt)

module.exports = pawnFns
