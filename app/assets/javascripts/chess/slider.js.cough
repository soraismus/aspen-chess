{ colorAt, rank_&_file_from }                  = require './extractors'
{ defaults }                                   = require './base-helpers'
{ emptyAt?, inessent?, offsetsFor, opponent? } = require './utilities'
{ generatePosition! }                          = require './constructors'
pieceFns                                       = require './piece'

accumulateTillBlocked = (board, color1) -> (rank, file, dir) ->
  possibleMoves = []

  [rankDiff, fileDiff] = rank_&_file_from dir

  inessent? = inessent?
  emptyAt?  = emptyAt? board
  colorAt   = colorAt board

  loop
    [rank, file] = [rank + rankDiff, file + fileDiff]

    newPos = generatePosition! (rank, file)

    break unless inessent? newPos

    if emptyAt? newPos
      possibleMoves.push newPos
    else
      color2 = colorAt newPos
      possibleMoves.push newPos if opponent? ([color1, color2])
      break

  possibleMoves

getPotentialKingAttacks = (bd, src, type) ->
  getPotentialMoves (bd, src, undefined, undefined, type)

getPotentialMoves = (board, src, chessmanType) ->
  potentialMoves = []
  offsets         = offsetsFor chessmanType
  color           = colorAt board src
  accumulate      = accumulateTillBlocked (board, color)
  [rank, file]    = rank_&_file_from src

  for dir in offsets
    potentialMoves = potentialMoves.concat (accumulate (rank, file, dir))

  potentialMoves

getPotentialMoves = (bd, src, rts, passant, type) ->
  offsets      = offsetsFor type
  color        = colorAt bd src
  accumulate   = accumulateTillBlocked (bd, color)
  [rank, file] = rank_&_file_from src

  moves = []

  for dir in offsets
    moves = moves.concat (accumulate (rank, file, dir))

  moves

sliderFns = defaults pieceFns {
  getPotentialKingAttacks
  getPotentialMoves
}

module.exports = sliderFns
