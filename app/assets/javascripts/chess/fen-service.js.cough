{
  unset-passant-pos
  unset-passant-pos-code
} = require './constants'

{
  unset-passant-position-code?
  unset-passant-position?
} = require './types'

contract-board = \board ->
  rgx    = /.{8,8}/g
  match  = rgx.exec(board)
  result = contract-empty-squares match[0]

  while ((match = rgx.exec(board)) != null)
    result += "/#{contract-empty-squares match[0]}"

  return result

contract-empty-squares = \string ->
  while ((match = string.match(/-+/)) != null)
    string = string.replace(match[0], match[0].length)

  return string

decode-fen = \fen ->
  [fen-bd, player, castlingRights, fen-passant, fen-clock, fen-mv-nbr] =
    fen.split space

  board             = expand-fen-board fen-bd
  passantPosition   = decode-position-code fen-passant
  promotionPosition = '-'
  clock             = Number.parseInt (fen-clock, 10)
  moveNumber        = Number.parseInt (fen-mv-nbr, 10)

  console.log ('#decode-fen', 'expand-fen-board fen-bd', board)
  
  {
    board
    player
    castlingRights
    passantPosition
    promotionPosition
    clock
    moveNumber
  }

decode-position-code = \pos-code ->
  if y.unset-passant-position-code? pos-code
    c.unset-passant-pos-code
  else
    decode-set-position-code pos-code

decode-set-position-code = \pos-code ->
  rank = 8 - Number.parseInt (pos-code[1], 10)
  file = (pos-code.charCodeAt 0) - 97

  return [rank, file]

digit-as-string? = \char ->
  /^[1-8]$/.test char

encode-context = \ctx ->
  { player, castlingRights } = ctx

  fen-bd = contract-board ctx.board
  fen-passant = encode-passant-position ctx.passantPosition
  fen-clock = ctx.clock
  fen-mv-nbr = ctx.moveNumber

  generate-fen (
    fen-bd, player, castlingRights, fen-passant, fen-clock, fen-mv-nbr)

encode-passant-position = \passant ->
  if y.unset-passant-position? passant
    c.unset-passant-pos
  else
    encode-set-passant-position passant

encode-set-passant-position = ([rank, file]) ->
  file-letter = String.fromCharCode (97 + file)
  rank-number = 8 - rank

  "#{file-letter}#{rank-number}"

expand-fen-board = \fen-board ->
  fen-board.replace(/\//g, '')
          .split('')
          .map(expand-char)
          .join('')

expand-char = \char ->
  if (digit-as-string? char) then (expand-empty-squares char) else char

expand-empty-squares = \digit-as-string ->
  nbr-times = Number.parseInt (digit-as-string, 10)
  repeat (empty-square, nbr-times)

generate-fen = (bd, plyr, rts, pass, clock, mv-nbr) ->
  "#{bd} #{plyr} #{rts} #{pass} #{clock} #{mv-nbr}"

# TODO: Move the following function into an appropriate file.
repeat = (string, count) ->
  result = empty-string

  return result if count < 1

  pattern = string

  while count > 1
    result += pattern if count & 1
    count >>= 1
    pattern += pattern

  result + pattern


# ----------
# Constants
# ----------

black        = 'b'
empty-square = '-'
empty-string = ''
space        = ' '
white        = 'w'

# ------------
# Fen Service
# ------------

fen-service = {
  decode-fen
  encode-context
}

module.exports = fen-service
