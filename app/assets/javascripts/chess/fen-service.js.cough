{
  unsetPassantPos
  unsetPassantPosCode
} = require './constants'

{
  unsetPassantPositionCode?
  unsetPassantPosition?
} = require './types'

contractBoard = \board ->
  rgx    = /.{8,8}/g
  match  = rgx.exec(board)
  result = contractEmptySquares match[0]

  while ((match = rgx.exec(board)) != null)
    result += "/#{contractEmptySquares match[0]}"

  return result

contractEmptySquares = \string ->
  while ((match = string.match(/-+/)) != null)
    string = string.replace(match[0], match[0].length)

  return string

decodeFen = \fen ->
  [fenBd, player, castlingRights, fenPassant, fenClock, fenMvNbr] =
    fen.split space

  board             = expandFenBoard fenBd
  passantPosition   = decodePositionCode fenPassant
  promotionPosition = '-'
  clock             = Number.parseInt (fenClock, 10)
  moveNumber        = Number.parseInt (fenMvNbr, 10)

  console.log ('#decodeFen', 'expandFenBoard fenBd', board)
  
  {
    board
    player
    castlingRights
    passantPosition
    promotionPosition
    clock
    moveNumber
  }

decodePositionCode = \posCode ->
  if unsetPassantPositionCode? posCode
    unsetPassantPosCode
  else
    decodeSetPositionCode posCode

decodeSetPositionCode = \posCode ->
  rank = 8 - Number.parseInt (posCode[1], 10)
  file = (posCode.charCodeAt 0) - 97
  [rank, file]

digitAsString? = \char ->
  /^[1-8]$/.test char

encodeContext = \ctx ->
  { player, castlingRights } = ctx

  fenBd      = contractBoard ctx.board
  fenPassant = encodePassantPosition ctx.passantPosition
  fenClock   = ctx.clock
  fenMvNbr   = ctx.moveNumber

  generateFen (
    fenBd, player, castlingRights, fenPassant, fenClock, fenMvNbr)

encodePassantPosition = \passant ->
  if unsetPassantPosition? passant
    unsetPassantPos
  else
    encodeSetPassantPosition passant

encodeSetPassantPosition = ([rank, file]) ->
  fileLetter = String.fromCharCode (97 + file)
  rankNumber = 8 - rank

  "#{fileLetter}#{rankNumber}"

expandFenBoard = \fenBoard ->
  fenBoard.replace(/\//g, '')
          .split('')
          .map(expandChar)
          .join('')

expandChar = \char ->
  if (digitAsString? char) then (expandEmptySquares char) else char

expandEmptySquares = \digitAsString ->
  nbrTimes = Number.parseInt (digitAsString, 10)
  repeat (emptySquare, nbrTimes)

generateFen = (bd, plyr, rts, pass, clock, mvNbr) ->
  "#{bd} #{plyr} #{rts} #{pass} #{clock} #{mvNbr}"

# TODO: Move the following function into an appropriate file.
repeat = (string, count) ->
  result = emptyString

  return result if count < 1

  pattern = string

  while count > 1
    result += pattern if count & 1
    count >>= 1
    pattern += pattern

  result + pattern


# ----------
# Constants
# ----------

black       = 'b'
emptySquare = '-'
emptyString = ''
space       = ' '
white       = 'w'

# ------------
# Fen Service
# ------------

fenService = {
  decodeFen
  encodeContext
}

module.exports = fenService
