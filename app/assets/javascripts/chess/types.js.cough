{
  black
  chessmanTypes
  colors
  emptySquare
  unsetPassantPos
  unsetPassantPosCode
  unsetPromotionPos
} = require './constants'

# -------------------------
# Private Helper Functions
# -------------------------

boolean? = \val ->
  val == true || val == false

hash? = \val ->
  javascriptType? ('Object', val)

javascriptType? = (type, val) ->
  toString.call val == '[object ' + type + ']'

integer? = \val ->
  val == val >> 0

nonNegativeIntegralString? = \digitAsString ->
  intg = Number.parseInt (digitAsString, 10)
  intg == intg >>> 0

# ------------------------
# Public Helper Functions
# ------------------------

bounded? = \val ->
  val >= 0 && val <= 7 && ! (boolean? val)

empty? = \square ->
  square == emptySquare

inessent? = \pos ->
  pos.every bounded?

nonNegativeInteger? = \val ->
  val == val >>> 0

string? = \val ->
  javascriptType? ('String', val)

undefined? = \val ->
  val == undefined

# -----------------------
# Classifying Predicates
# -----------------------

black? = \color ->
  color == black

board? = \val ->
  /^[kqrbnp-]{64,64}$/i.test  val

castlingRight? = \val ->
  /^[KQkq]$/.test val

castlingRightSet? = \val ->
  /(^-$)|(^K?Q?k?q?$)/.test val

chessman? = \val ->
  /^[kqrbnp]$/i.test val

chessmanType? = \val ->
  chessmanTypes.some (\type -> type == val)

color? = \val ->
  colors.some (\color -> color == val)

colorPair? = \val ->
  pair? val && val.every color?

context? = \val ->
  hash? val &&
    board? val.board &&
    color? val.player &&
    castlingRightSet? val.castlingRights &&
    passantPosition? val.passantPosition

fen? = \val ->
  string? val && do (slots = val.split ' ') ->
      fenBoard? slots[0] &&
      color? slots[1] &&
      castlingRightSet? slots[2] &&
      passantPositionCode? slots[3] &&
      nonNegativeIntegralString? slots[4] &&
      nonNegativeIntegralString? slots[5]

fenBoard? = \val ->
  /^([kqrbnp\d]{1,8}\/){1,7}[kqrbnp\d]{1,8}$/i.test val

integralPair? = \val ->
  pair? val && val.every integer?

pair? = \val ->
  Array.isArray val && val.length == 2

passantPosition? = \pos ->
  unsetPassantPosition? pos || position? pos

passantPositionCode? = \code ->
  unsetPassantPositionCode? code || positionCode? code

pawnDirection? = \val ->
  val == 1 || val == -1

position? = \val ->
  integralPair? val && inessent? val

positionCode? = \val ->
  /^[a-h][1-8]$/.test val

positionComponent? = \val ->
  bounded? val && integer? val

promotionPosition? = \pos ->
  unsetPromotionPosition? pos || position? pos

square? = \val ->
  chessman? val || empty? val

unsetPassantPosition? = \val ->
  val == unsetPassantPos

unsetPassantPositionCode? = \val ->
  val == unsetPassantPosCode

unsetPromotionPosition? = \val ->
  val == unsetPromotionPos

types = {
  black?
  board?
  bounded?
  castlingRight?
  castlingRightSet?
  chessman?
  chessmanType?
  color?
  colorPair?
  context?
  fen?
  fenBoard?
  empty?
  inessent?
  integralPair?
  nonNegativeInteger?
  passantPosition?
  passantPositionCode?
  promotionPosition?
  pawnDirection?
  position?
  positionCode?
  positionComponent?
  square?
  string?
  undefined?
  unsetPassantPosition?
  unsetPassantPositionCode?
}

# Many of these types were only used by the nowDefunct assertions file.
module.exports = types
