{ empty?, inessent? } = require './types'

{
  absentColor
  black
  moveOffsets
  unsetPassantPos
  unsetPromotionPos
  white
} = require './constants'

{
  colorAt
  colorsAt
  fileOf
  rankOf
  squareAt
  to_1d
  to_2d
} = require './extractors'

available? = (board, pos1) -> \pos2 ->
  emptyAt? board pos2 || do ->
    colorPair = colorsAt board [pos1, pos2]
    opponent? colorPair

black? = \color ->
  color == black

colorAbsent? = \color ->
  color == absentColor

emptyAt? = \board \pos ->
  empty? (squareAt board pos)

fileDifference = (src, tgt) ->
  (fileOf tgt) - (fileOf src)

occupied? = \square ->
  ! (empty? square)

offsetsFor = \chessmanType ->
  moveOffsets[chessmanType]

opponent? = ([color1, color2]) ->
  color2 != absentColor &&
      color2 != color1 &&
      color1 != absentColor

opponentAt? = (board, pos1) -> \pos2 ->
  opponent? ([pos1, pos2].map (colorAt board))

opposingColor = \activeColor ->
  if black? activeColor then white else black

passantPositionSet? = \passantPosition ->
  ! (passantPositionUnset? passantPosition)

passantPositionUnset? = \passantPosition ->
  passantPosition == unsetPassantPos

promotionPositionSet? = \promotionPosition ->
  promotionPosition != unsetPromotionPos

rankDifference = (src, tgt) ->
  (rankOf tgt) - (rankOf src)

replace = (square, board, pos) ->
  idx = to_1d pos
  "#{board.slice (0, idx)}#{square}#{board.slice (idx + 1)}"

samePosition? = \pos1 \pos2 ->
  passantPositionSet? pos1 &&
      pos1[0] == pos2[0] &&
      pos1[1] == pos2[1]

utilities = {
  available?
  black?
  colorAbsent?
  emptyAt?
  fileDifference
  inessent?
  occupied?
  offsetsFor
  opponent?
  opposingColor
  passantPositionUnset?
  promotionPositionSet?
  rankDifference
  replace
  samePosition?
  to_2d
}

module.exports = utilities
