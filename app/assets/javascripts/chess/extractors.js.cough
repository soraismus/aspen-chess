{
  absentColor
  bishop
  black
  blackBishop
  blackKing
  blackKnight
  blackPawn
  blackQueen
  blackRook
  king
  knight
  pawn
  queen
  rook
  white
} = require './constants'

{
  black?
  toBlack
  white?
} = require './base-helpers'

typeOf = {}
typeOf[blackKing  ] = king
typeOf[blackQueen ] = queen
typeOf[blackRook  ] = rook
typeOf[blackBishop] = bishop
typeOf[blackKnight] = knight
typeOf[blackPawn  ] = pawn

# -----------------
# Helper Functions
# -----------------

to_1d = \pos ->
  rank = rankOf pos
  file = fileOf pos
  8 * rank + file

# No assertions b/c #opponentMated? encounters indices < 0 or > 63.
to_2d = \idx -> [Math.floor (idx / 8), idx % 8]

correspondingBlackChessman = \chessman ->
  if (white? chessman) then (toBlack chessman) else chessman

ofColor? = \color \square ->
  color == colorOf square

# -----------
# Extractors
# -----------

chessmanPositionsFrom = (board, color) ->
  i = -1
  splitBoard = board.split ''
  positions = []

  getPos = \color ->
    colorPred = ofColor? color

    \sq ->
      i += 1
      positions.push (to_2d i) if colorPred sq

  splitBoard.forEach (getPos color)

  positions

chessmanTypeAt = \board \pos ->
  chessmanTypeOf (squareAt board pos)

chessmanTypeOf = \chessman ->
  abbrev = correspondingBlackChessman chessman
  typeOf[abbrev]

colorAt = \board \pos ->
  colorOf (squareAt board pos)

colorOf = \square ->
  switch
    when (black? square) then black
    when (white? square) then white
    else absentColor

colorsAt = \board \positions ->
  positions.map (colorAt board)

fileOf = ([rank, file]) ->
  file

promotionPositionFrom = \ctx ->
  ctx.promotionPosition

rank_&_file_from = \val ->
  val

rankOf = ([rank, file]) ->
  rank

squareAt = \board \pos ->
  board[to_1d pos]

extractors = {
  chessmanPositionsFrom
  chessmanTypeAt
  chessmanTypeOf
  correspondingBlackChessman
  colorAt
  colorOf
  colorsAt
  fileOf
  promotionPositionFrom
  rank_&_file_from
  rankOf
  squareAt
  to_1d
  to_2d
}

module.exports = extractors
