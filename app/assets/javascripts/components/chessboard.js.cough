{ black?, occupied? }  = require '../chess/utilities'
{ colorOf, squareAt }  = require '../chess/extractors'
{ img, table, td, tr } = require './DOM'
{ white }              = require '../chess/constants'

typeAt = require('../chess/extractors').correspondingBlackChessman

# Initial, default settings.
activeColor       = white
currentUserColor = white
orientation        = white

active? = \color ->
  color == activeColor && color == currentUserColor

addChessboard = \board ->
  ranks = getIndices().map(addRank(board))
  table
    className : 'board'
    ranks

addChessman = (color, type, rank, file) ->
  img
    className : chessmanClass (rank, file, color)
    src       : srcFor (color, type)

addRank = \board \rank ->
  squares = getIndices().map(addSquare(board, rank))
  tr
    className : 'rank'
    key       : rankKey rank
    squares

addSquare = (board, rank) -> (file) ->
  square = squareAt (board) [rank, file]
  chessman = chessmanOn (square, rank, file)
  td
    className : squareClass (rank, file)
    key       : squareKey (rank, file)
    chessman

Chessboard = \env ->
  currentUserColor = env.color
  orientation        = env.orientation
  context            = env.context
  activeColor       = context.player

  addChessboard context.board

chessmanClass = (rank, file, color) ->
  # "active piece ch-pos-#{rank}-#{file}"

  klasses =
    piece  : true
    active : active? color

  klasses["ch-pos-#{rank}-#{file}"] = true

  getClassname klasses

chessmanOn = (square, rank, file) ->
  if occupied? square
    color = colorOf square
    type = typeAt square
    addChessman (color, type, rank, file)
  else
    null

getIndices = ->
  if black? orientation then [7..0] else [0..7]

getClassname = (klasses) ->
  # Assert: nonArrayObject? klasses
  result = ''
  for own klass, true? of klasses
    result += "#{klass} " if true?
  result.trim ()

rankKey = \rank ->
  "rank-#{rank}"

squareClass = (rank, file) ->
  "sq sq-pos-#{rank}-#{file}"

squareKey = (rank, file) ->
  "pos-#{rank}-#{file}"

srcFor = (color, pngType) ->
  "assets/#{color}#{pngType}.png"

module.exports = Chessboard
