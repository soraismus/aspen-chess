# Make this file an NPM package.

addComponent = (keypath, newComponent, obj) ->
  result = shallowCopy obj
  if atomic? keypath
    result[getAtomicKey keypath] = newComponent
  else
    [nextKey, nextKeypath] = process keypath
    result[nextKey] ?= {}
    result[nextKey] = addComponent (nextKeypath, newComponent, result[nextKey])
  result

atomic? = \keypath ->
  ! (nonAtomicPattern.test keypath)

deleteComponent = (keypath, obj) ->
  result = shallowCopy obj
  if atomic? keypath
    delete result[getAtomicKey keypath]
  else
    [nextKey, nextKeypath] = process keypath
    nextObj = result[nextKey]
    result[nextKey] = deleteComponent (nextKeypath, nextObj)
  result

getAtomicKey = \keypath ->
  /\.(.*)/.exec(keypath)[1]

_getComponent = (keypath, obj) ->
  if atomic? keypath
    shallowCopy obj[getAtomicKey keypath]
  else
    [nextKey, nextKeypath] = process keypath
    return null unless indexable? obj[nextKey]
    _getComponent (nextKeypath, obj[nextKey])

getComponent = \keypath \obj ->
  _getComponent (keypath, obj)

hash? = \val ->
  val|['constructor'] == Object

hasType? = \type \val ->
  "[object #{type}]" == Object.prototype.toString.call val

indexable? = \val ->
  object? val || array? val

object? = \val ->
  val == Object val

process = \keypath ->
  /\.([^\.]*)(\.?.*)$/.exec(keypath).slice(1, 3)

pushComponent = (keypath, newComponent, obj) ->
  result = shallowCopy obj
  if atomic? keypath
    # Assert: array? result
    key = getAtomicKey keypath
    arrayCopy = shallowCopy result[key]
    arrayCopy.push newComponent
    result[key] = arrayCopy
  else
    [nextKey, nextKeypath] = process keypath
    nextObj = result[nextKey]
    result[nextKey] = pushComponent (nextKeypath, newComponent, nextObj)
  result

shallowCopy = \val ->
  switch
    when array? val
      copy = []
      copy.push element for element in val
    when hash? val
      copy = {}
      copy[key] = prop for own key, prop of val
    else
      copy = val
  copy

updateComponent = (keypath, substitute, obj) ->
  result = shallowCopy obj
  if atomic? keypath
    result[getAtomicKey keypath] = substitute
  else
    [nextKey, nextKeypath] = process keypath
    nextObj = result[nextKey]
    result[nextKey] = updateComponent (nextKeypath, substitute, nextObj)
  result

array? = Array.isArray || hasType? 'Array'

[function?, string?] = ['Function', 'String'].map hasType?

nonAtomicPattern = /^\.\w*\./

module.exports = {
  addComponent
  deleteComponent
  getComponent
  pushComponent
  updateComponent
}
